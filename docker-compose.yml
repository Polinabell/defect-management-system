# Docker Compose конфигурация для разработки
version: '3.8'

services:
  # База данных PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: defect_management_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: defect_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - defect_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis для кэширования и Celery
  redis:
    image: redis:7-alpine
    container_name: defect_management_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass "redis_password"
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - defect_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Django приложение
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: defect_management_web
    restart: unless-stopped
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.development
      - DATABASE_URL=postgres://postgres:postgres@db:5432/defect_management
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/0
    volumes:
      - ./backend:/app/backend
      - ./frontend:/app/frontend
      - media_volume:/app/media
      - static_volume:/app/static
      - logs_volume:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - defect_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Celery worker
  celery:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: defect_management_celery
    restart: unless-stopped
    command: ["celery-worker"]
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.development
      - DATABASE_URL=postgres://postgres:postgres@db:5432/defect_management
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/0
    volumes:
      - ./backend:/app/backend
      - media_volume:/app/media
      - logs_volume:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - defect_network
    healthcheck:
      test: ["CMD", "celery", "-A", "config", "inspect", "ping"]
      interval: 60s
      timeout: 10s
      retries: 3

  # Celery beat (планировщик задач)
  celery-beat:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: defect_management_celery_beat
    restart: unless-stopped
    command: ["celery-beat"]
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.development
      - DATABASE_URL=postgres://postgres:postgres@db:5432/defect_management
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/0
    volumes:
      - ./backend:/app/backend
      - logs_volume:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - defect_network

  # Nginx (веб-сервер)
  nginx:
    image: nginx:alpine
    container_name: defect_management_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/defect-management.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/app/static:ro
      - media_volume:/app/media:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - defect_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Мониторинг с Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: defect_management_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - defect_network

  # Grafana для визуализации метрик
  grafana:
    image: grafana/grafana:latest
    container_name: defect_management_grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - defect_network

# Именованные тома
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_volume:
    driver: local
  static_volume:
    driver: local
  logs_volume:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Сеть приложения
networks:
  defect_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
