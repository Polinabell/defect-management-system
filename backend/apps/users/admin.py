"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

from django.contrib import admin
from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe
from .models import User, UserProfile, UserSession


class UserProfileInline(admin.StackedInline):
    """
    Inline —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    model = UserProfile
    can_delete = False
    verbose_name = '–ü—Ä–æ—Ñ–∏–ª—å'
    verbose_name_plural = '–ü—Ä–æ—Ñ–∏–ª—å'
    extra = 0
    fields = [
        ('avatar', 'bio'),
        ('birth_date', 'department'),
        ('hire_date', 'supervisor'),
        ('email_notifications', 'sms_notifications'),
        ('theme', 'language'),
    ]


@admin.register(User)
class UserAdmin(BaseUserAdmin):
    """
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    inlines = [UserProfileInline]
    
    # –ü–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ
    list_display = [
        'email', 'get_full_name', 'role', 'position',
        'is_active', 'is_locked_display', 'last_login', 'date_joined'
    ]
    
    # –ü–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_fields = ['email', 'first_name', 'last_name', 'position']
    
    # –§–∏–ª—å—Ç—Ä—ã
    list_filter = [
        'role', 'is_active', 'is_staff', 'is_superuser',
        'must_change_password', 'date_joined', 'last_login'
    ]
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ordering = ['last_name', 'first_name']
    
    # –ü–æ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
    readonly_fields = [
        'date_joined', 'last_login', 'created_at', 'updated_at',
        'password_changed_at', 'last_login_ip', 'failed_login_attempts',
        'get_full_name', 'get_sessions_count'
    ]
    
    # –ü–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('email', 'username', 'password')
        }),
        ('–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('first_name', 'last_name', 'middle_name', 'phone', 'position')
        }),
        ('–†–æ–ª—å –∏ –ø—Ä–∞–≤–∞', {
            'fields': ('role', 'is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')
        }),
        ('–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', {
            'fields': (
                'is_email_verified', 'must_change_password', 'password_changed_at',
                'last_login_ip', 'failed_login_attempts', 'locked_until'
            ),
            'classes': ['collapse']
        }),
        ('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ', {
            'fields': ('date_joined', 'last_login', 'created_at', 'updated_at'),
            'classes': ['collapse']
        }),
        ('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', {
            'fields': ('get_full_name', 'get_sessions_count'),
            'classes': ['collapse']
        }),
    )
    
    # –ü–æ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    add_fieldsets = (
        ('–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
            'classes': ['wide'],
            'fields': (
                'email', 'username', 'password1', 'password2',
                'first_name', 'last_name', 'role', 'is_active'
            ),
        }),
    )
    
    # –î–µ–π—Å—Ç–≤–∏—è
    actions = ['activate_users', 'deactivate_users', 'unlock_users', 'reset_passwords']
    
    def get_full_name(self, obj):
        """–ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return obj.get_full_name()
    get_full_name.short_description = '–ü–æ–ª–Ω–æ–µ –∏–º—è'
    
    def is_locked_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        if obj.is_locked:
            return format_html(
                '<span style="color: red;">üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</span>'
            )
        return format_html(
            '<span style="color: green;">‚úì –ê–∫—Ç–∏–≤–µ–Ω</span>'
        )
    is_locked_display.short_description = '–°—Ç–∞—Ç—É—Å'
    
    def get_sessions_count(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        count = obj.sessions.filter(is_active=True).count()
        if count > 0:
            url = reverse('admin:users_usersession_changelist')
            return format_html(
                '<a href="{}?user__id__exact={}">{} –∞–∫—Ç–∏–≤–Ω—ã—Ö</a>',
                url, obj.id, count
            )
        return '0 –∞–∫—Ç–∏–≤–Ω—ã—Ö'
    get_sessions_count.short_description = '–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏'
    
    # –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    def activate_users(self, request, queryset):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        count = queryset.update(is_active=True)
        self.message_user(request, f'–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')
    activate_users.short_description = '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
    
    def deactivate_users(self, request, queryset):
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        count = queryset.update(is_active=False)
        self.message_user(request, f'–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')
    deactivate_users.short_description = '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
    
    def unlock_users(self, request, queryset):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        count = 0
        for user in queryset:
            if user.is_locked:
                user.unlock_account()
                count += 1
        self.message_user(request, f'–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')
    unlock_users.short_description = '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
    
    def reset_passwords(self, request, queryset):
        """–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        count = queryset.update(must_change_password=True)
        self.message_user(
            request,
            f'–î–ª—è {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è.'
        )
    reset_passwords.short_description = '–¢—Ä–µ–±–æ–≤–∞—Ç—å —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è'


@admin.register(UserProfile)
class UserProfileAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    list_display = [
        'user', 'get_user_role', 'department', 'hire_date',
        'email_notifications', 'theme'
    ]
    
    search_fields = ['user__email', 'user__first_name', 'user__last_name', 'department']
    
    list_filter = [
        'department', 'email_notifications', 'sms_notifications',
        'theme', 'language', 'hire_date'
    ]
    
    readonly_fields = ['created_at', 'updated_at', 'deleted_at']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('user', 'avatar', 'bio', 'birth_date')
        }),
        ('–†–∞–±–æ—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('department', 'hire_date', 'supervisor')
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', {
            'fields': ('email_notifications', 'sms_notifications')
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞', {
            'fields': ('theme', 'language')
        }),
        ('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ', {
            'fields': ('created_at', 'updated_at', 'deleted_at'),
            'classes': ['collapse']
        }),
    )
    
    def get_user_role(self, obj):
        """–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return obj.user.get_role_display()
    get_user_role.short_description = '–†–æ–ª—å'


@admin.register(UserSession)
class UserSessionAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    list_display = [
        'user', 'get_browser_info', 'ip_address',
        'created_at', 'last_activity', 'is_active'
    ]
    
    search_fields = ['user__email', 'user__first_name', 'user__last_name', 'ip_address']
    
    list_filter = ['is_active', 'created_at', 'last_activity']
    
    readonly_fields = [
        'session_key', 'created_at', 'last_activity',
        'get_browser_info', 'duration'
    ]
    
    ordering = ['-last_activity']
    
    fieldsets = (
        ('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏', {
            'fields': ('user', 'session_key', 'is_active')
        }),
        ('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('ip_address', 'user_agent', 'get_browser_info')
        }),
        ('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏', {
            'fields': ('created_at', 'last_activity', 'duration')
        }),
    )
    
    actions = ['terminate_sessions']
    
    def terminate_sessions(self, request, queryset):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π"""
        count = queryset.update(is_active=False)
        self.message_user(request, f'–ó–∞–≤–µ—Ä—à–µ–Ω–æ {count} —Å–µ—Å—Å–∏–π.')
    terminate_sessions.short_description = '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏'
    
    def get_browser_info(self, obj):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ"""
        return obj.get_browser_info()
    get_browser_info.short_description = '–ë—Ä–∞—É–∑–µ—Ä'
    
    def duration(self, obj):
        """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏"""
        return obj.duration
    duration.short_description = '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
admin.site.site_header = '–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–∞–º–∏'
admin.site.site_title = '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'
admin.site.index_title = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å'
