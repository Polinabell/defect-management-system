"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""

from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.db.models import Count
from .models import ReportTemplate, GeneratedReport, Dashboard, AnalyticsQuery


@admin.register(ReportTemplate)
class ReportTemplateAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç—á—ë—Ç–æ–≤
    """
    list_display = [
        'name', 'report_type_display', 'output_format_display',
        'is_public', 'is_active', 'reports_count', 'created_by', 'created_at'
    ]
    search_fields = ['name', 'description']
    list_filter = ['report_type', 'output_format', 'is_public', 'is_active', 'created_at']
    readonly_fields = ['created_at', 'updated_at', 'reports_count']
    autocomplete_fields = ['created_by']
    ordering = ['report_type', 'name']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'description', 'report_type', 'output_format')
        }),
        ('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', {
            'fields': ('filter_config', 'display_config'),
            'classes': ['collapse']
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞', {
            'fields': ('is_public', 'is_active', 'created_by')
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': ('reports_count',),
            'classes': ['collapse']
        }),
        ('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ', {
            'fields': ('created_at', 'updated_at'),
            'classes': ['collapse']
        }),
    )
    
    actions = ['make_public', 'make_private', 'activate', 'deactivate']
    
    def get_queryset(self, request):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã"""
        return super().get_queryset(request).select_related(
            'created_by'
        ).annotate(
            reports_count=Count('generated_reports')
        )
    
    def report_type_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞"""
        colors = {
            'project_summary': 'blue',
            'defects_analysis': 'red',
            'performance_report': 'green',
            'timeline_report': 'orange',
            'custom': 'purple',
        }
        color = colors.get(obj.report_type, 'black')
        return format_html(
            '<span style="color: {}; font-weight: bold;">{}</span>',
            color, obj.get_report_type_display()
        )
    report_type_display.short_description = '–¢–∏–ø –æ—Ç—á—ë—Ç–∞'
    
    def output_format_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞"""
        icons = {
            'pdf': 'üìÑ',
            'excel': 'üìä',
            'csv': 'üìù',
            'json': 'üîß',
        }
        icon = icons.get(obj.output_format, 'üìÑ')
        return format_html(
            '{} {}',
            icon, obj.get_output_format_display()
        )
    output_format_display.short_description = '–§–æ—Ä–º–∞—Ç'
    
    def reports_count(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤"""
        count = obj.reports_count
        if count > 0:
            url = reverse('admin:reports_generatedreport_changelist')
            return format_html(
                '<a href="{}?template__id__exact={}">{} –æ—Ç—á—ë—Ç–æ–≤</a>',
                url, obj.id, count
            )
        return '0 –æ—Ç—á—ë—Ç–æ–≤'
    reports_count.short_description = '–û—Ç—á—ë—Ç—ã'
    
    # –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    def make_public(self, request, queryset):
        """–°–¥–µ–ª–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º–∏"""
        count = queryset.update(is_public=True)
        self.message_user(request, f'–°–¥–µ–ª–∞–Ω–æ –ø—É–±–ª–∏—á–Ω—ã–º–∏ {count} —à–∞–±–ª–æ–Ω–æ–≤.')
    make_public.short_description = '–°–¥–µ–ª–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º–∏'
    
    def make_private(self, request, queryset):
        """–°–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏"""
        count = queryset.update(is_public=False)
        self.message_user(request, f'–°–¥–µ–ª–∞–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ {count} —à–∞–±–ª–æ–Ω–æ–≤.')
    make_private.short_description = '–°–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏'
    
    def activate(self, request, queryset):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"""
        count = queryset.update(is_active=True)
        self.message_user(request, f'–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {count} —à–∞–±–ª–æ–Ω–æ–≤.')
    activate.short_description = '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'
    
    def deactivate(self, request, queryset):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"""
        count = queryset.update(is_active=False)
        self.message_user(request, f'–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {count} —à–∞–±–ª–æ–Ω–æ–≤.')
    deactivate.short_description = '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'


@admin.register(GeneratedReport)
class GeneratedReportAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤
    """
    list_display = [
        'name', 'template', 'project', 'status_display',
        'generated_by', 'file_size_display', 'download_count',
        'is_expired_display', 'created_at'
    ]
    search_fields = ['name', 'description', 'template__name']
    list_filter = ['status', 'template', 'project', 'generated_at', 'expires_at']
    readonly_fields = [
        'status', 'file', 'file_size', 'generated_at', 'processing_time',
        'error_message', 'download_count', 'created_at', 'updated_at',
        'is_expired', 'formatted_file_size'
    ]
    autocomplete_fields = ['template', 'project', 'generated_by']
    ordering = ['-created_at']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'description', 'template', 'project')
        }),
        ('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', {
            'fields': ('date_from', 'date_to', 'filter_params'),
            'classes': ['collapse']
        }),
        ('–†–µ–∑—É–ª—å—Ç–∞—Ç', {
            'fields': (
                'status', 'file', 'file_size', 'formatted_file_size',
                'error_message'
            )
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': (
                'generated_by', 'generated_at', 'processing_time',
                'expires_at', 'is_expired', 'download_count'
            )
        }),
        ('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ', {
            'fields': ('created_at', 'updated_at'),
            'classes': ['collapse']
        }),
    )
    
    actions = ['delete_expired', 'extend_expiration']
    
    def get_queryset(self, request):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã"""
        return super().get_queryset(request).select_related(
            'template', 'project', 'generated_by'
        )
    
    def status_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å —Ü–≤–µ—Ç–æ–º"""
        colors = {
            'pending': 'orange',
            'processing': 'blue',
            'completed': 'green',
            'failed': 'red',
            'expired': 'gray',
        }
        color = colors.get(obj.status, 'black')
        return format_html(
            '<span style="color: {}; font-weight: bold;">{}</span>',
            color, obj.get_status_display()
        )
    status_display.short_description = '–°—Ç–∞—Ç—É—Å'
    
    def file_size_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
        if obj.file_size:
            from apps.common.utils import format_file_size
            return format_file_size(obj.file_size)
        return '-'
    file_size_display.short_description = '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞'
    
    def is_expired_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞"""
        if obj.is_expired:
            return format_html(
                '<span style="color: red; font-weight: bold;">‚ö†Ô∏è –ò—Å—Ç—ë–∫</span>'
            )
        elif obj.expires_at:
            return format_html(
                '<span style="color: green;">‚úì –î–µ–π—Å—Ç–≤—É–µ—Ç</span>'
            )
        return '-'
    is_expired_display.short_description = '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è'
    
    # –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    def delete_expired(self, request, queryset):
        """–£–¥–∞–ª–∏—Ç—å –∏—Å—Ç—ë–∫—à–∏–µ –æ—Ç—á—ë—Ç—ã"""
        expired_reports = queryset.filter(expires_at__lt=timezone.now())
        count = expired_reports.count()
        expired_reports.delete()
        self.message_user(request, f'–£–¥–∞–ª–µ–Ω–æ {count} –∏—Å—Ç—ë–∫—à–∏—Ö –æ—Ç—á—ë—Ç–æ–≤.')
    delete_expired.short_description = '–£–¥–∞–ª–∏—Ç—å –∏—Å—Ç—ë–∫—à–∏–µ –æ—Ç—á—ë—Ç—ã'
    
    def extend_expiration(self, request, queryset):
        """–ü—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ 30 –¥–Ω–µ–π"""
        from django.utils import timezone
        from datetime import timedelta
        
        new_expiration = timezone.now() + timedelta(days=30)
        count = queryset.update(expires_at=new_expiration)
        self.message_user(request, f'–ü—Ä–æ–¥–ª—ë–Ω —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è {count} –æ—Ç—á—ë—Ç–æ–≤.')
    extend_expiration.short_description = '–ü—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è'


@admin.register(Dashboard)
class DashboardAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞—à–±–æ—Ä–¥–æ–≤
    """
    list_display = [
        'name', 'dashboard_type_display', 'is_default',
        'is_public', 'widgets_count', 'created_by', 'created_at'
    ]
    search_fields = ['name', 'description']
    list_filter = ['dashboard_type', 'is_default', 'is_public', 'created_at']
    readonly_fields = ['created_at', 'updated_at', 'widgets_count']
    autocomplete_fields = ['created_by']
    ordering = ['dashboard_type', 'name']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'description', 'dashboard_type')
        }),
        ('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤', {
            'fields': ('widgets_config',),
            'classes': ['collapse']
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞', {
            'fields': ('is_default', 'is_public', 'allowed_roles', 'created_by')
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': ('widgets_count',),
            'classes': ['collapse']
        }),
        ('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ', {
            'fields': ('created_at', 'updated_at'),
            'classes': ['collapse']
        }),
    )
    
    actions = ['make_default', 'make_public', 'make_private']
    
    def dashboard_type_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
        icons = {
            'executive': 'üëî',
            'project_manager': 'üìã',
            'engineer': 'üîß',
            'custom': '‚öôÔ∏è',
        }
        icon = icons.get(obj.dashboard_type, 'üìä')
        return format_html(
            '{} {}',
            icon, obj.get_dashboard_type_display()
        )
    dashboard_type_display.short_description = '–¢–∏–ø –¥–∞—à–±–æ—Ä–¥–∞'
    
    def widgets_count(self, obj):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∂–µ—Ç–æ–≤"""
        if isinstance(obj.widgets_config, list):
            return len(obj.widgets_config)
        return 0
    widgets_count.short_description = '–í–∏–¥–∂–µ—Ç–æ–≤'
    
    # –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    def make_default(self, request, queryset):
        """–°–¥–µ–ª–∞—Ç—å –¥–∞—à–±–æ—Ä–¥–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        for dashboard in queryset:
            # –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ default —É –¥—Ä—É–≥–∏—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤ —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞
            Dashboard.objects.filter(
                dashboard_type=dashboard.dashboard_type
            ).update(is_default=False)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
            dashboard.is_default = True
            dashboard.save()
        
        count = queryset.count()
        self.message_user(request, f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–∫ –¥–∞—à–±–æ—Ä–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è {count} —Ç–∏–ø–æ–≤.')
    make_default.short_description = '–°–¥–µ–ª–∞—Ç—å –¥–∞—à–±–æ—Ä–¥–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'
    
    def make_public(self, request, queryset):
        """–°–¥–µ–ª–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º–∏"""
        count = queryset.update(is_public=True)
        self.message_user(request, f'–°–¥–µ–ª–∞–Ω–æ –ø—É–±–ª–∏—á–Ω—ã–º–∏ {count} –¥–∞—à–±–æ—Ä–¥–æ–≤.')
    make_public.short_description = '–°–¥–µ–ª–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º–∏'
    
    def make_private(self, request, queryset):
        """–°–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏"""
        count = queryset.update(is_public=False)
        self.message_user(request, f'–°–¥–µ–ª–∞–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ {count} –¥–∞—à–±–æ—Ä–¥–æ–≤.')
    make_private.short_description = '–°–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏'


@admin.register(AnalyticsQuery)
class AnalyticsQueryAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    list_display = [
        'name', 'query_type_display', 'is_public', 'is_cached',
        'usage_count', 'last_used_at', 'created_by', 'created_at'
    ]
    search_fields = ['name', 'description']
    list_filter = ['query_type', 'is_public', 'is_cached', 'created_at', 'last_used_at']
    readonly_fields = ['usage_count', 'last_used_at', 'created_at', 'updated_at']
    autocomplete_fields = ['created_by']
    ordering = ['query_type', 'name']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('name', 'description', 'query_type')
        }),
        ('SQL –∑–∞–ø—Ä–æ—Å', {
            'fields': ('sql_query',),
            'classes': ['collapse']
        }),
        ('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', {
            'fields': ('query_config',),
            'classes': ['collapse']
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': ('is_public', 'is_cached', 'cache_duration', 'created_by')
        }),
        ('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è', {
            'fields': ('usage_count', 'last_used_at')
        }),
        ('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ', {
            'fields': ('created_at', 'updated_at'),
            'classes': ['collapse']
        }),
    )
    
    actions = ['make_public', 'make_private', 'enable_cache', 'disable_cache']
    
    def query_type_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        colors = {
            'defects': 'red',
            'projects': 'blue',
            'users': 'green',
            'performance': 'orange',
            'custom': 'purple',
        }
        color = colors.get(obj.query_type, 'black')
        return format_html(
            '<span style="color: {}; font-weight: bold;">{}</span>',
            color, obj.get_query_type_display()
        )
    query_type_display.short_description = '–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞'
    
    # –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    def make_public(self, request, queryset):
        """–°–¥–µ–ª–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º–∏"""
        count = queryset.update(is_public=True)
        self.message_user(request, f'–°–¥–µ–ª–∞–Ω–æ –ø—É–±–ª–∏—á–Ω—ã–º–∏ {count} –∑–∞–ø—Ä–æ—Å–æ–≤.')
    make_public.short_description = '–°–¥–µ–ª–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º–∏'
    
    def make_private(self, request, queryset):
        """–°–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏"""
        count = queryset.update(is_public=False)
        self.message_user(request, f'–°–¥–µ–ª–∞–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ {count} –∑–∞–ø—Ä–æ—Å–æ–≤.')
    make_private.short_description = '–°–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏'
    
    def enable_cache(self, request, queryset):
        """–í–∫–ª—é—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        count = queryset.update(is_cached=True)
        self.message_user(request, f'–í–∫–ª—é—á–µ–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è {count} –∑–∞–ø—Ä–æ—Å–æ–≤.')
    enable_cache.short_description = '–í–∫–ª—é—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ'
    
    def disable_cache(self, request, queryset):
        """–û—Ç–∫–ª—é—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        count = queryset.update(is_cached=False)
        self.message_user(request, f'–û—Ç–∫–ª—é—á–µ–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è {count} –∑–∞–ø—Ä–æ—Å–æ–≤.')
    disable_cache.short_description = '–û—Ç–∫–ª—é—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ'
